from pyrogram import Client, filters
import datetime
import time
import logging
from saran import db
from info import ADMINS
import asyncio
from pyrogram.errors import InputUserDeactivated, UserNotParticipant, FloodWait, UserIsBlocked, PeerIdInvalid

logger = logging.getLogger(__name__)

@Client.on_message(filters.command("grp_broadcast") & filters.user(ADMINS) & filters.reply)
async def grp_brodcst(bot, message):
    chats = await db.get_all_chats()
    b_msg = message.reply_to_message
    sts = await message.reply_text(
        text='Broadcasting your messages...'
    )
    start_time = time.time()
    total_chats = await db.total_chat_count()
    done = 0
    failed =0

    success = 0
    async for chat in chats:
        pti, sh = await broadcast_messages(int(chat['id']), b_msg)
        if pti:
            success += 1
        elif pti == False:
            if sh == "Blocked":
                blocked+=1
            elif sh == "Deleted":
                deleted += 1
            elif sh == "Error":
                failed += 1
        done += 1
        await asyncio.sleep(2)
        await sts.edit(f"Broadcast in progress:\n\nTotal Chats {total_chats}\nCompleted: {done} / {total_chats}\nSuccess: {success}\nFailed: {failed}")    
    time_taken = datetime.timedelta(seconds=int(time.time()-start_time))
    await sts.edit(f"Broadcast Completed:\nCompleted in {time_taken} seconds.\n\nTotal Chats {total_chats}\nCompleted: {done} / {total_chats}\nSuccess: {success}\nFailed: {failed}")


async def broadcast_messages(user_id, message):
    try:
        await message.copy(chat_id=user_id)
        return True, "Success"
    except FloodWait as e:
        await asyncio.sleep(e.x)
        return await broadcast_messages(user_id, message)
    except InputUserDeactivated:
        await db.delete_user(int(user_id))
        logging.info(f"{user_id}-Removed from Database, since deleted account.")
        return False, "Deleted"
    except UserIsBlocked:
        logging.info(f"{user_id} -Blocked the bot.")
        return False, "Blocked"
    except PeerIdInvalid:
        await db.delete_user(int(user_id))
        logging.info(f"{user_id} - PeerIdInvalid")
        return False, "Error"
    except Exception as e:
        return False, "Error"

INMAL = """р┤др┤╛р┤Щр╡Нр┤Хр╡╛ р┤Жр┤╡р┤╢р╡Нр┤пр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤лр┤пр╡╜ р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир┤╛р┤пр┤┐р┤▓р╡Нр┤▓ ЁЯШХ
р┤др┤╛р┤┤р╡Ж р┤кр┤▒р┤пр╡Бр┤ир╡Нр┤и р┤Хр┤╛р┤░р╡Нр┤пр┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤╢р╡Нр┤░р┤жр╡Нр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...

=> р┤Хр┤▒р┤Хр╡Нр┤▒р╡Нр┤▒р╡Н р┤╕р╡Нр┤кр╡Жр┤▓р╡Нр┤▓р┤┐р┤Вр┤Чр┤┐р╡╜ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.

=> р┤Т.р┤Яр┤┐.р┤Яр┤┐ р┤кр╡Нр┤▓р┤╛р┤▒р╡Нр┤▒р╡Нр┤лр╡Лр┤ор╡Бр┤Хр┤│р┤┐р╡╜ р┤▒р┤┐р┤▓р╡Ар┤╕р╡Н р┤Жр┤Хр┤╛р┤др╡Нр┤д р┤╕р┤┐р┤ир┤┐р┤ор┤Хр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤░р╡Бр┤др╡Н.

=> р┤Хр┤┤р┤┐р┤╡р┤др╡Бр┤В [р┤╕р┤┐р┤ир┤┐р┤ор┤пр╡Бр┤Яр╡Ж р┤кр╡Зр┤░р╡Н, р┤╡р╡╝р┤╖р┤В] р┤И р┤░р╡Ар┤др┤┐р┤пр┤┐р╡╜ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.

=> р┤Чр╡Вр┤Чр┤┐р┤│р┤┐р╡╜ р┤╕р╡Жр╡╝р┤Ър╡Нр┤Ър╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤╛р┤ир┤╛р┤пр┤┐ р┤др┤╛р┤┤р╡Ж р┤Хр┤╛р┤гр╡Бр┤ир╡Нр┤и р┤мр┤Яр╡Нр┤Яр╡║ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр┤╛р┤В ЁЯШМ"""

INTAM = """роирпАроЩрпНроХро│рпН роХрпЛро░ро┐роп роХрпЛрокрпНрокрпИ роОройрпНройро╛ро▓рпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ ЁЯШХ
рокро┐ройрпНро╡ро░рпБро╡ройро╡ро▒рпНро▒рпИ роЪрпЖропрпНроп роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН...

=> роЪро░ро┐ропро╛рой роОро┤рпБродрпНродрпБрокрпНрокро┐ро┤рпИропрпБроЯройрпН роХрпЛро░ро┐роХрпНроХрпИ

=> OTT роЗропроЩрпНроХрпБродро│роЩрпНроХро│ро┐ро▓рпН ро╡рпЖро│ро┐ропро┐роЯрокрпНрокроЯро╛род родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпИроХрпН роХрпЗроЯрпНроХ ро╡рпЗрогрпНроЯро╛роорпН

=> [MovieName, year] роЗроирпНрод ро╡роЯро┐ро╡роорпИрокрпНрокро┐ро▓рпН роХрпЗроЯрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.

=> Google роЗро▓рпН родрпЗроЯ роХрпАро┤рпЗ роЙро│рпНро│ рокрпКродрпНродро╛ройрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН ЁЯШМ"""

INHIN = """рдореБрдЭреЗ рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЕрдиреБрд░реЛрдзрд┐рдд рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реА ЁЯШХ
рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ...

=> рд╕рд╣реА рд╡рд░реНрддрдиреА рдХреЗ рд╕рд╛рде рдЕрдиреБрд░реЛрдз

=> рдЙрди рдлрд┐рд▓реНрдореЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рди рдкреВрдЫреЗрдВ рдЬреЛ рдУрдЯреАрдЯреА рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдкрд░ рд░рд┐рд▓реАрдЬ рдирд╣реАрдВ рд╣реБрдИ рд╣реИрдВ

=> рдЗрд╕ рдкреНрд░рд╛рд░реВрдк рдореЗрдВ [MovieName, year] рдореЗрдВ рдкреВрдЫрдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред

=> Google рдкрд░ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ ЁЯШМ"""

INENG = """I couldn't find the file you requested ЁЯШХ
Try to do the following...

=> Request with correct spelling

=> Don't ask movies that are not released in OTT platforms

=> Try to ask in [MovieName, year] this format.

=> Use the button below to search on Google ЁЯШМ"""
